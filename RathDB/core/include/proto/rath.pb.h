// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rath.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rath_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rath_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rath_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rath_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rath_2eproto;
class PBlock;
struct PBlockDefaultTypeInternal;
extern PBlockDefaultTypeInternal _PBlock_default_instance_;
class PBlockHeader;
struct PBlockHeaderDefaultTypeInternal;
extern PBlockHeaderDefaultTypeInternal _PBlockHeader_default_instance_;
class PBlockRecord;
struct PBlockRecordDefaultTypeInternal;
extern PBlockRecordDefaultTypeInternal _PBlockRecord_default_instance_;
class PCoinRecord;
struct PCoinRecordDefaultTypeInternal;
extern PCoinRecordDefaultTypeInternal _PCoinRecord_default_instance_;
class PTransaction;
struct PTransactionDefaultTypeInternal;
extern PTransactionDefaultTypeInternal _PTransaction_default_instance_;
class PTransactionInput;
struct PTransactionInputDefaultTypeInternal;
extern PTransactionInputDefaultTypeInternal _PTransactionInput_default_instance_;
class PTransactionOutput;
struct PTransactionOutputDefaultTypeInternal;
extern PTransactionOutputDefaultTypeInternal _PTransactionOutput_default_instance_;
class PUndoBlock;
struct PUndoBlockDefaultTypeInternal;
extern PUndoBlockDefaultTypeInternal _PUndoBlock_default_instance_;
class PUndoCoinRecord;
struct PUndoCoinRecordDefaultTypeInternal;
extern PUndoCoinRecordDefaultTypeInternal _PUndoCoinRecord_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PBlock* Arena::CreateMaybeMessage<::PBlock>(Arena*);
template<> ::PBlockHeader* Arena::CreateMaybeMessage<::PBlockHeader>(Arena*);
template<> ::PBlockRecord* Arena::CreateMaybeMessage<::PBlockRecord>(Arena*);
template<> ::PCoinRecord* Arena::CreateMaybeMessage<::PCoinRecord>(Arena*);
template<> ::PTransaction* Arena::CreateMaybeMessage<::PTransaction>(Arena*);
template<> ::PTransactionInput* Arena::CreateMaybeMessage<::PTransactionInput>(Arena*);
template<> ::PTransactionOutput* Arena::CreateMaybeMessage<::PTransactionOutput>(Arena*);
template<> ::PUndoBlock* Arena::CreateMaybeMessage<::PUndoBlock>(Arena*);
template<> ::PUndoCoinRecord* Arena::CreateMaybeMessage<::PUndoCoinRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PBlockRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBlockRecord) */ {
 public:
  inline PBlockRecord() : PBlockRecord(nullptr) {}
  ~PBlockRecord() override;
  explicit constexpr PBlockRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBlockRecord(const PBlockRecord& from);
  PBlockRecord(PBlockRecord&& from) noexcept
    : PBlockRecord() {
    *this = ::std::move(from);
  }

  inline PBlockRecord& operator=(const PBlockRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBlockRecord& operator=(PBlockRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBlockRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBlockRecord* internal_default_instance() {
    return reinterpret_cast<const PBlockRecord*>(
               &_PBlockRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBlockRecord& a, PBlockRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PBlockRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBlockRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBlockRecord* New() const final {
    return new PBlockRecord();
  }

  PBlockRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBlockRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBlockRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PBlockRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBlockRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBlockRecord";
  }
  protected:
  explicit PBlockRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFileStoredFieldNumber = 4,
    kUndoFileStoredFieldNumber = 7,
    kBlockHeaderFieldNumber = 1,
    kHeightFieldNumber = 2,
    kNumTransactionsFieldNumber = 3,
    kBlockOffsetStartFieldNumber = 5,
    kBlockOffsetEndFieldNumber = 6,
    kUndoOffsetStartFieldNumber = 8,
    kUndoOffsetEndFieldNumber = 9,
  };
  // string block_file_stored = 4;
  void clear_block_file_stored();
  const std::string& block_file_stored() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_file_stored(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_file_stored();
  PROTOBUF_MUST_USE_RESULT std::string* release_block_file_stored();
  void set_allocated_block_file_stored(std::string* block_file_stored);
  private:
  const std::string& _internal_block_file_stored() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_file_stored(const std::string& value);
  std::string* _internal_mutable_block_file_stored();
  public:

  // string undo_file_stored = 7;
  void clear_undo_file_stored();
  const std::string& undo_file_stored() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_undo_file_stored(ArgT0&& arg0, ArgT... args);
  std::string* mutable_undo_file_stored();
  PROTOBUF_MUST_USE_RESULT std::string* release_undo_file_stored();
  void set_allocated_undo_file_stored(std::string* undo_file_stored);
  private:
  const std::string& _internal_undo_file_stored() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_undo_file_stored(const std::string& value);
  std::string* _internal_mutable_undo_file_stored();
  public:

  // .PBlockHeader block_header = 1;
  bool has_block_header() const;
  private:
  bool _internal_has_block_header() const;
  public:
  void clear_block_header();
  const ::PBlockHeader& block_header() const;
  PROTOBUF_MUST_USE_RESULT ::PBlockHeader* release_block_header();
  ::PBlockHeader* mutable_block_header();
  void set_allocated_block_header(::PBlockHeader* block_header);
  private:
  const ::PBlockHeader& _internal_block_header() const;
  ::PBlockHeader* _internal_mutable_block_header();
  public:
  void unsafe_arena_set_allocated_block_header(
      ::PBlockHeader* block_header);
  ::PBlockHeader* unsafe_arena_release_block_header();

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_transactions = 3;
  void clear_num_transactions();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_transactions() const;
  void set_num_transactions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_transactions() const;
  void _internal_set_num_transactions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 block_offset_start = 5;
  void clear_block_offset_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_offset_start() const;
  void set_block_offset_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_block_offset_start() const;
  void _internal_set_block_offset_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 block_offset_end = 6;
  void clear_block_offset_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_offset_end() const;
  void set_block_offset_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_block_offset_end() const;
  void _internal_set_block_offset_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 undo_offset_start = 8;
  void clear_undo_offset_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_offset_start() const;
  void set_undo_offset_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_undo_offset_start() const;
  void _internal_set_undo_offset_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 undo_offset_end = 9;
  void clear_undo_offset_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_offset_end() const;
  void set_undo_offset_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_undo_offset_end() const;
  void _internal_set_undo_offset_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBlockRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_file_stored_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr undo_file_stored_;
  ::PBlockHeader* block_header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_transactions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_offset_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_offset_end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_offset_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_offset_end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rath_2eproto;
};
// -------------------------------------------------------------------

class PCoinRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PCoinRecord) */ {
 public:
  inline PCoinRecord() : PCoinRecord(nullptr) {}
  ~PCoinRecord() override;
  explicit constexpr PCoinRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PCoinRecord(const PCoinRecord& from);
  PCoinRecord(PCoinRecord&& from) noexcept
    : PCoinRecord() {
    *this = ::std::move(from);
  }

  inline PCoinRecord& operator=(const PCoinRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PCoinRecord& operator=(PCoinRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PCoinRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const PCoinRecord* internal_default_instance() {
    return reinterpret_cast<const PCoinRecord*>(
               &_PCoinRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PCoinRecord& a, PCoinRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PCoinRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PCoinRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PCoinRecord* New() const final {
    return new PCoinRecord();
  }

  PCoinRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PCoinRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PCoinRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PCoinRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PCoinRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PCoinRecord";
  }
  protected:
  explicit PCoinRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtxoFieldNumber = 4,
    kAmountsFieldNumber = 5,
    kPublicKeysFieldNumber = 6,
    kVersionFieldNumber = 1,
    kIsCoinBaseFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated uint32 utxo = 4;
  int utxo_size() const;
  private:
  int _internal_utxo_size() const;
  public:
  void clear_utxo();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utxo(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_utxo() const;
  void _internal_add_utxo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_utxo();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 utxo(int index) const;
  void set_utxo(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_utxo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      utxo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_utxo();

  // repeated uint32 amounts = 5;
  int amounts_size() const;
  private:
  int _internal_amounts_size() const;
  public:
  void clear_amounts();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_amounts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_amounts() const;
  void _internal_add_amounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_amounts();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 amounts(int index) const;
  void set_amounts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_amounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      amounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_amounts();

  // repeated uint32 public_keys = 6;
  int public_keys_size() const;
  private:
  int _internal_public_keys_size() const;
  public:
  void clear_public_keys();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_public_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_public_keys() const;
  void _internal_add_public_keys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_public_keys();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 public_keys(int index) const;
  void set_public_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_public_keys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      public_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_public_keys();

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_coin_base = 2;
  void clear_is_coin_base();
  bool is_coin_base() const;
  void set_is_coin_base(bool value);
  private:
  bool _internal_is_coin_base() const;
  void _internal_set_is_coin_base(bool value);
  public:

  // uint32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PCoinRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > utxo_;
  mutable std::atomic<int> _utxo_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > amounts_;
  mutable std::atomic<int> _amounts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > public_keys_;
  mutable std::atomic<int> _public_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  bool is_coin_base_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rath_2eproto;
};
// -------------------------------------------------------------------

class PUndoBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PUndoBlock) */ {
 public:
  inline PUndoBlock() : PUndoBlock(nullptr) {}
  ~PUndoBlock() override;
  explicit constexpr PUndoBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PUndoBlock(const PUndoBlock& from);
  PUndoBlock(PUndoBlock&& from) noexcept
    : PUndoBlock() {
    *this = ::std::move(from);
  }

  inline PUndoBlock& operator=(const PUndoBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline PUndoBlock& operator=(PUndoBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PUndoBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const PUndoBlock* internal_default_instance() {
    return reinterpret_cast<const PUndoBlock*>(
               &_PUndoBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PUndoBlock& a, PUndoBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(PUndoBlock* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PUndoBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PUndoBlock* New() const final {
    return new PUndoBlock();
  }

  PUndoBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PUndoBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PUndoBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PUndoBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PUndoBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PUndoBlock";
  }
  protected:
  explicit PUndoBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionHashesFieldNumber = 1,
    kUndoCoinRecordsFieldNumber = 2,
  };
  // repeated uint32 transaction_hashes = 1;
  int transaction_hashes_size() const;
  private:
  int _internal_transaction_hashes_size() const;
  public:
  void clear_transaction_hashes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_transaction_hashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_transaction_hashes() const;
  void _internal_add_transaction_hashes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_transaction_hashes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 transaction_hashes(int index) const;
  void set_transaction_hashes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_transaction_hashes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      transaction_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_transaction_hashes();

  // repeated .PUndoCoinRecord undo_coin_records = 2;
  int undo_coin_records_size() const;
  private:
  int _internal_undo_coin_records_size() const;
  public:
  void clear_undo_coin_records();
  ::PUndoCoinRecord* mutable_undo_coin_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PUndoCoinRecord >*
      mutable_undo_coin_records();
  private:
  const ::PUndoCoinRecord& _internal_undo_coin_records(int index) const;
  ::PUndoCoinRecord* _internal_add_undo_coin_records();
  public:
  const ::PUndoCoinRecord& undo_coin_records(int index) const;
  ::PUndoCoinRecord* add_undo_coin_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PUndoCoinRecord >&
      undo_coin_records() const;

  // @@protoc_insertion_point(class_scope:PUndoBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > transaction_hashes_;
  mutable std::atomic<int> _transaction_hashes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PUndoCoinRecord > undo_coin_records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rath_2eproto;
};
// -------------------------------------------------------------------

class PBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBlock) */ {
 public:
  inline PBlock() : PBlock(nullptr) {}
  ~PBlock() override;
  explicit constexpr PBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBlock(const PBlock& from);
  PBlock(PBlock&& from) noexcept
    : PBlock() {
    *this = ::std::move(from);
  }

  inline PBlock& operator=(const PBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBlock& operator=(PBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBlock* internal_default_instance() {
    return reinterpret_cast<const PBlock*>(
               &_PBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PBlock& a, PBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(PBlock* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBlock* New() const final {
    return new PBlock();
  }

  PBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBlock";
  }
  protected:
  explicit PBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 2,
    kBlockHeaderFieldNumber = 1,
    kHashFieldNumber = 3,
    kCalculateFeesFieldNumber = 4,
    kObtainMerkleRootFieldNumber = 5,
  };
  // repeated .PTransaction transactions = 2;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::PTransaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransaction >*
      mutable_transactions();
  private:
  const ::PTransaction& _internal_transactions(int index) const;
  ::PTransaction* _internal_add_transactions();
  public:
  const ::PTransaction& transactions(int index) const;
  ::PTransaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransaction >&
      transactions() const;

  // .PBlockHeader block_header = 1;
  bool has_block_header() const;
  private:
  bool _internal_has_block_header() const;
  public:
  void clear_block_header();
  const ::PBlockHeader& block_header() const;
  PROTOBUF_MUST_USE_RESULT ::PBlockHeader* release_block_header();
  ::PBlockHeader* mutable_block_header();
  void set_allocated_block_header(::PBlockHeader* block_header);
  private:
  const ::PBlockHeader& _internal_block_header() const;
  ::PBlockHeader* _internal_mutable_block_header();
  public:
  void unsafe_arena_set_allocated_block_header(
      ::PBlockHeader* block_header);
  ::PBlockHeader* unsafe_arena_release_block_header();

  // uint32 hash = 3;
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 calculate_fees = 4;
  void clear_calculate_fees();
  ::PROTOBUF_NAMESPACE_ID::uint32 calculate_fees() const;
  void set_calculate_fees(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_calculate_fees() const;
  void _internal_set_calculate_fees(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 obtain_merkle_root = 5;
  void clear_obtain_merkle_root();
  ::PROTOBUF_NAMESPACE_ID::uint32 obtain_merkle_root() const;
  void set_obtain_merkle_root(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_obtain_merkle_root() const;
  void _internal_set_obtain_merkle_root(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransaction > transactions_;
  ::PBlockHeader* block_header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 calculate_fees_;
  ::PROTOBUF_NAMESPACE_ID::uint32 obtain_merkle_root_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rath_2eproto;
};
// -------------------------------------------------------------------

class PBlockHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBlockHeader) */ {
 public:
  inline PBlockHeader() : PBlockHeader(nullptr) {}
  ~PBlockHeader() override;
  explicit constexpr PBlockHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBlockHeader(const PBlockHeader& from);
  PBlockHeader(PBlockHeader&& from) noexcept
    : PBlockHeader() {
    *this = ::std::move(from);
  }

  inline PBlockHeader& operator=(const PBlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBlockHeader& operator=(PBlockHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBlockHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBlockHeader* internal_default_instance() {
    return reinterpret_cast<const PBlockHeader*>(
               &_PBlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PBlockHeader& a, PBlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(PBlockHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBlockHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBlockHeader* New() const final {
    return new PBlockHeader();
  }

  PBlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBlockHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBlockHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PBlockHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBlockHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBlockHeader";
  }
  protected:
  explicit PBlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kPreviousBlockHashFieldNumber = 2,
    kMerkleRootFieldNumber = 3,
    kDifficultyTargetFieldNumber = 4,
    kNonceFieldNumber = 5,
    kTimestampFieldNumber = 6,
  };
  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 previous_block_hash = 2;
  void clear_previous_block_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 previous_block_hash() const;
  void set_previous_block_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_previous_block_hash() const;
  void _internal_set_previous_block_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 merkle_root = 3;
  void clear_merkle_root();
  ::PROTOBUF_NAMESPACE_ID::uint32 merkle_root() const;
  void set_merkle_root(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_merkle_root() const;
  void _internal_set_merkle_root(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 difficulty_target = 4;
  void clear_difficulty_target();
  ::PROTOBUF_NAMESPACE_ID::uint32 difficulty_target() const;
  void set_difficulty_target(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_difficulty_target() const;
  void _internal_set_difficulty_target(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nonce = 5;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint32 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PBlockHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 previous_block_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 merkle_root_;
  ::PROTOBUF_NAMESPACE_ID::uint32 difficulty_target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rath_2eproto;
};
// -------------------------------------------------------------------

class PTransaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PTransaction) */ {
 public:
  inline PTransaction() : PTransaction(nullptr) {}
  ~PTransaction() override;
  explicit constexpr PTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PTransaction(const PTransaction& from);
  PTransaction(PTransaction&& from) noexcept
    : PTransaction() {
    *this = ::std::move(from);
  }

  inline PTransaction& operator=(const PTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PTransaction& operator=(PTransaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const PTransaction* internal_default_instance() {
    return reinterpret_cast<const PTransaction*>(
               &_PTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PTransaction& a, PTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(PTransaction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PTransaction* New() const final {
    return new PTransaction();
  }

  PTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PTransaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PTransaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PTransaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTransaction";
  }
  protected:
  explicit PTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionInputsFieldNumber = 2,
    kTransactionOutputsFieldNumber = 3,
    kVersionFieldNumber = 1,
    kLockTimeFieldNumber = 4,
  };
  // repeated .PTransactionInput transaction_inputs = 2;
  int transaction_inputs_size() const;
  private:
  int _internal_transaction_inputs_size() const;
  public:
  void clear_transaction_inputs();
  ::PTransactionInput* mutable_transaction_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransactionInput >*
      mutable_transaction_inputs();
  private:
  const ::PTransactionInput& _internal_transaction_inputs(int index) const;
  ::PTransactionInput* _internal_add_transaction_inputs();
  public:
  const ::PTransactionInput& transaction_inputs(int index) const;
  ::PTransactionInput* add_transaction_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransactionInput >&
      transaction_inputs() const;

  // repeated .PTransactionOutput transaction_outputs = 3;
  int transaction_outputs_size() const;
  private:
  int _internal_transaction_outputs_size() const;
  public:
  void clear_transaction_outputs();
  ::PTransactionOutput* mutable_transaction_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransactionOutput >*
      mutable_transaction_outputs();
  private:
  const ::PTransactionOutput& _internal_transaction_outputs(int index) const;
  ::PTransactionOutput* _internal_add_transaction_outputs();
  public:
  const ::PTransactionOutput& transaction_outputs(int index) const;
  ::PTransactionOutput* add_transaction_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransactionOutput >&
      transaction_outputs() const;

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lock_time = 4;
  void clear_lock_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 lock_time() const;
  void set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lock_time() const;
  void _internal_set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransactionInput > transaction_inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransactionOutput > transaction_outputs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lock_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rath_2eproto;
};
// -------------------------------------------------------------------

class PTransactionInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PTransactionInput) */ {
 public:
  inline PTransactionInput() : PTransactionInput(nullptr) {}
  ~PTransactionInput() override;
  explicit constexpr PTransactionInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PTransactionInput(const PTransactionInput& from);
  PTransactionInput(PTransactionInput&& from) noexcept
    : PTransactionInput() {
    *this = ::std::move(from);
  }

  inline PTransactionInput& operator=(const PTransactionInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline PTransactionInput& operator=(PTransactionInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PTransactionInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const PTransactionInput* internal_default_instance() {
    return reinterpret_cast<const PTransactionInput*>(
               &_PTransactionInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PTransactionInput& a, PTransactionInput& b) {
    a.Swap(&b);
  }
  inline void Swap(PTransactionInput* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PTransactionInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PTransactionInput* New() const final {
    return new PTransactionInput();
  }

  PTransactionInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PTransactionInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PTransactionInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PTransactionInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PTransactionInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTransactionInput";
  }
  protected:
  explicit PTransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceTransactionHashFieldNumber = 1,
    kUtxoIndexFieldNumber = 2,
    kSignatureFieldNumber = 3,
  };
  // uint32 reference_transaction_hash = 1;
  void clear_reference_transaction_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 reference_transaction_hash() const;
  void set_reference_transaction_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reference_transaction_hash() const;
  void _internal_set_reference_transaction_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 utxo_index = 2;
  void clear_utxo_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 utxo_index() const;
  void set_utxo_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utxo_index() const;
  void _internal_set_utxo_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 signature = 3;
  void clear_signature();
  ::PROTOBUF_NAMESPACE_ID::uint32 signature() const;
  void set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_signature() const;
  void _internal_set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PTransactionInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reference_transaction_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utxo_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rath_2eproto;
};
// -------------------------------------------------------------------

class PTransactionOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PTransactionOutput) */ {
 public:
  inline PTransactionOutput() : PTransactionOutput(nullptr) {}
  ~PTransactionOutput() override;
  explicit constexpr PTransactionOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PTransactionOutput(const PTransactionOutput& from);
  PTransactionOutput(PTransactionOutput&& from) noexcept
    : PTransactionOutput() {
    *this = ::std::move(from);
  }

  inline PTransactionOutput& operator=(const PTransactionOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline PTransactionOutput& operator=(PTransactionOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PTransactionOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const PTransactionOutput* internal_default_instance() {
    return reinterpret_cast<const PTransactionOutput*>(
               &_PTransactionOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PTransactionOutput& a, PTransactionOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(PTransactionOutput* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PTransactionOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PTransactionOutput* New() const final {
    return new PTransactionOutput();
  }

  PTransactionOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PTransactionOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PTransactionOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PTransactionOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PTransactionOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PTransactionOutput";
  }
  protected:
  explicit PTransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
  };
  // uint32 amount = 1;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 public_key = 2;
  void clear_public_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 public_key() const;
  void set_public_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_public_key() const;
  void _internal_set_public_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PTransactionOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rath_2eproto;
};
// -------------------------------------------------------------------

class PUndoCoinRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PUndoCoinRecord) */ {
 public:
  inline PUndoCoinRecord() : PUndoCoinRecord(nullptr) {}
  ~PUndoCoinRecord() override;
  explicit constexpr PUndoCoinRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PUndoCoinRecord(const PUndoCoinRecord& from);
  PUndoCoinRecord(PUndoCoinRecord&& from) noexcept
    : PUndoCoinRecord() {
    *this = ::std::move(from);
  }

  inline PUndoCoinRecord& operator=(const PUndoCoinRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PUndoCoinRecord& operator=(PUndoCoinRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PUndoCoinRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const PUndoCoinRecord* internal_default_instance() {
    return reinterpret_cast<const PUndoCoinRecord*>(
               &_PUndoCoinRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PUndoCoinRecord& a, PUndoCoinRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PUndoCoinRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PUndoCoinRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PUndoCoinRecord* New() const final {
    return new PUndoCoinRecord();
  }

  PUndoCoinRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PUndoCoinRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PUndoCoinRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PUndoCoinRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PUndoCoinRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PUndoCoinRecord";
  }
  protected:
  explicit PUndoCoinRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtxoFieldNumber = 4,
    kAmountsFieldNumber = 5,
    kPublicKeysFieldNumber = 6,
    kVersionFieldNumber = 1,
    kIsCoinBaseFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated uint32 utxo = 4;
  int utxo_size() const;
  private:
  int _internal_utxo_size() const;
  public:
  void clear_utxo();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utxo(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_utxo() const;
  void _internal_add_utxo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_utxo();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 utxo(int index) const;
  void set_utxo(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_utxo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      utxo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_utxo();

  // repeated uint32 amounts = 5;
  int amounts_size() const;
  private:
  int _internal_amounts_size() const;
  public:
  void clear_amounts();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_amounts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_amounts() const;
  void _internal_add_amounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_amounts();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 amounts(int index) const;
  void set_amounts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_amounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      amounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_amounts();

  // repeated uint32 public_keys = 6;
  int public_keys_size() const;
  private:
  int _internal_public_keys_size() const;
  public:
  void clear_public_keys();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_public_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_public_keys() const;
  void _internal_add_public_keys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_public_keys();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 public_keys(int index) const;
  void set_public_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_public_keys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      public_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_public_keys();

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_coin_base = 2;
  void clear_is_coin_base();
  bool is_coin_base() const;
  void set_is_coin_base(bool value);
  private:
  bool _internal_is_coin_base() const;
  void _internal_set_is_coin_base(bool value);
  public:

  // uint32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PUndoCoinRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > utxo_;
  mutable std::atomic<int> _utxo_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > amounts_;
  mutable std::atomic<int> _amounts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > public_keys_;
  mutable std::atomic<int> _public_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  bool is_coin_base_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rath_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBlockRecord

// .PBlockHeader block_header = 1;
inline bool PBlockRecord::_internal_has_block_header() const {
  return this != internal_default_instance() && block_header_ != nullptr;
}
inline bool PBlockRecord::has_block_header() const {
  return _internal_has_block_header();
}
inline void PBlockRecord::clear_block_header() {
  if (GetArenaForAllocation() == nullptr && block_header_ != nullptr) {
    delete block_header_;
  }
  block_header_ = nullptr;
}
inline const ::PBlockHeader& PBlockRecord::_internal_block_header() const {
  const ::PBlockHeader* p = block_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBlockHeader&>(
      ::_PBlockHeader_default_instance_);
}
inline const ::PBlockHeader& PBlockRecord::block_header() const {
  // @@protoc_insertion_point(field_get:PBlockRecord.block_header)
  return _internal_block_header();
}
inline void PBlockRecord::unsafe_arena_set_allocated_block_header(
    ::PBlockHeader* block_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_header_);
  }
  block_header_ = block_header;
  if (block_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBlockRecord.block_header)
}
inline ::PBlockHeader* PBlockRecord::release_block_header() {
  
  ::PBlockHeader* temp = block_header_;
  block_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBlockHeader* PBlockRecord::unsafe_arena_release_block_header() {
  // @@protoc_insertion_point(field_release:PBlockRecord.block_header)
  
  ::PBlockHeader* temp = block_header_;
  block_header_ = nullptr;
  return temp;
}
inline ::PBlockHeader* PBlockRecord::_internal_mutable_block_header() {
  
  if (block_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBlockHeader>(GetArenaForAllocation());
    block_header_ = p;
  }
  return block_header_;
}
inline ::PBlockHeader* PBlockRecord::mutable_block_header() {
  ::PBlockHeader* _msg = _internal_mutable_block_header();
  // @@protoc_insertion_point(field_mutable:PBlockRecord.block_header)
  return _msg;
}
inline void PBlockRecord::set_allocated_block_header(::PBlockHeader* block_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_header_;
  }
  if (block_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PBlockHeader>::GetOwningArena(block_header);
    if (message_arena != submessage_arena) {
      block_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_header, submessage_arena);
    }
    
  } else {
    
  }
  block_header_ = block_header;
  // @@protoc_insertion_point(field_set_allocated:PBlockRecord.block_header)
}

// uint32 height = 2;
inline void PBlockRecord::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::height() const {
  // @@protoc_insertion_point(field_get:PBlockRecord.height)
  return _internal_height();
}
inline void PBlockRecord::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void PBlockRecord::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PBlockRecord.height)
}

// uint32 num_transactions = 3;
inline void PBlockRecord::clear_num_transactions() {
  num_transactions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::_internal_num_transactions() const {
  return num_transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::num_transactions() const {
  // @@protoc_insertion_point(field_get:PBlockRecord.num_transactions)
  return _internal_num_transactions();
}
inline void PBlockRecord::_internal_set_num_transactions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_transactions_ = value;
}
inline void PBlockRecord::set_num_transactions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_transactions(value);
  // @@protoc_insertion_point(field_set:PBlockRecord.num_transactions)
}

// string block_file_stored = 4;
inline void PBlockRecord::clear_block_file_stored() {
  block_file_stored_.ClearToEmpty();
}
inline const std::string& PBlockRecord::block_file_stored() const {
  // @@protoc_insertion_point(field_get:PBlockRecord.block_file_stored)
  return _internal_block_file_stored();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBlockRecord::set_block_file_stored(ArgT0&& arg0, ArgT... args) {
 
 block_file_stored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBlockRecord.block_file_stored)
}
inline std::string* PBlockRecord::mutable_block_file_stored() {
  std::string* _s = _internal_mutable_block_file_stored();
  // @@protoc_insertion_point(field_mutable:PBlockRecord.block_file_stored)
  return _s;
}
inline const std::string& PBlockRecord::_internal_block_file_stored() const {
  return block_file_stored_.Get();
}
inline void PBlockRecord::_internal_set_block_file_stored(const std::string& value) {
  
  block_file_stored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PBlockRecord::_internal_mutable_block_file_stored() {
  
  return block_file_stored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PBlockRecord::release_block_file_stored() {
  // @@protoc_insertion_point(field_release:PBlockRecord.block_file_stored)
  return block_file_stored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PBlockRecord::set_allocated_block_file_stored(std::string* block_file_stored) {
  if (block_file_stored != nullptr) {
    
  } else {
    
  }
  block_file_stored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_file_stored,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PBlockRecord.block_file_stored)
}

// uint32 block_offset_start = 5;
inline void PBlockRecord::clear_block_offset_start() {
  block_offset_start_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::_internal_block_offset_start() const {
  return block_offset_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::block_offset_start() const {
  // @@protoc_insertion_point(field_get:PBlockRecord.block_offset_start)
  return _internal_block_offset_start();
}
inline void PBlockRecord::_internal_set_block_offset_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  block_offset_start_ = value;
}
inline void PBlockRecord::set_block_offset_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_block_offset_start(value);
  // @@protoc_insertion_point(field_set:PBlockRecord.block_offset_start)
}

// uint32 block_offset_end = 6;
inline void PBlockRecord::clear_block_offset_end() {
  block_offset_end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::_internal_block_offset_end() const {
  return block_offset_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::block_offset_end() const {
  // @@protoc_insertion_point(field_get:PBlockRecord.block_offset_end)
  return _internal_block_offset_end();
}
inline void PBlockRecord::_internal_set_block_offset_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  block_offset_end_ = value;
}
inline void PBlockRecord::set_block_offset_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_block_offset_end(value);
  // @@protoc_insertion_point(field_set:PBlockRecord.block_offset_end)
}

// string undo_file_stored = 7;
inline void PBlockRecord::clear_undo_file_stored() {
  undo_file_stored_.ClearToEmpty();
}
inline const std::string& PBlockRecord::undo_file_stored() const {
  // @@protoc_insertion_point(field_get:PBlockRecord.undo_file_stored)
  return _internal_undo_file_stored();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBlockRecord::set_undo_file_stored(ArgT0&& arg0, ArgT... args) {
 
 undo_file_stored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBlockRecord.undo_file_stored)
}
inline std::string* PBlockRecord::mutable_undo_file_stored() {
  std::string* _s = _internal_mutable_undo_file_stored();
  // @@protoc_insertion_point(field_mutable:PBlockRecord.undo_file_stored)
  return _s;
}
inline const std::string& PBlockRecord::_internal_undo_file_stored() const {
  return undo_file_stored_.Get();
}
inline void PBlockRecord::_internal_set_undo_file_stored(const std::string& value) {
  
  undo_file_stored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PBlockRecord::_internal_mutable_undo_file_stored() {
  
  return undo_file_stored_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PBlockRecord::release_undo_file_stored() {
  // @@protoc_insertion_point(field_release:PBlockRecord.undo_file_stored)
  return undo_file_stored_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PBlockRecord::set_allocated_undo_file_stored(std::string* undo_file_stored) {
  if (undo_file_stored != nullptr) {
    
  } else {
    
  }
  undo_file_stored_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), undo_file_stored,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PBlockRecord.undo_file_stored)
}

// uint32 undo_offset_start = 8;
inline void PBlockRecord::clear_undo_offset_start() {
  undo_offset_start_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::_internal_undo_offset_start() const {
  return undo_offset_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::undo_offset_start() const {
  // @@protoc_insertion_point(field_get:PBlockRecord.undo_offset_start)
  return _internal_undo_offset_start();
}
inline void PBlockRecord::_internal_set_undo_offset_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  undo_offset_start_ = value;
}
inline void PBlockRecord::set_undo_offset_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_undo_offset_start(value);
  // @@protoc_insertion_point(field_set:PBlockRecord.undo_offset_start)
}

// uint32 undo_offset_end = 9;
inline void PBlockRecord::clear_undo_offset_end() {
  undo_offset_end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::_internal_undo_offset_end() const {
  return undo_offset_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockRecord::undo_offset_end() const {
  // @@protoc_insertion_point(field_get:PBlockRecord.undo_offset_end)
  return _internal_undo_offset_end();
}
inline void PBlockRecord::_internal_set_undo_offset_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  undo_offset_end_ = value;
}
inline void PBlockRecord::set_undo_offset_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_undo_offset_end(value);
  // @@protoc_insertion_point(field_set:PBlockRecord.undo_offset_end)
}

// -------------------------------------------------------------------

// PCoinRecord

// uint32 version = 1;
inline void PCoinRecord::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PCoinRecord::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PCoinRecord::version() const {
  // @@protoc_insertion_point(field_get:PCoinRecord.version)
  return _internal_version();
}
inline void PCoinRecord::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void PCoinRecord::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:PCoinRecord.version)
}

// bool is_coin_base = 2;
inline void PCoinRecord::clear_is_coin_base() {
  is_coin_base_ = false;
}
inline bool PCoinRecord::_internal_is_coin_base() const {
  return is_coin_base_;
}
inline bool PCoinRecord::is_coin_base() const {
  // @@protoc_insertion_point(field_get:PCoinRecord.is_coin_base)
  return _internal_is_coin_base();
}
inline void PCoinRecord::_internal_set_is_coin_base(bool value) {
  
  is_coin_base_ = value;
}
inline void PCoinRecord::set_is_coin_base(bool value) {
  _internal_set_is_coin_base(value);
  // @@protoc_insertion_point(field_set:PCoinRecord.is_coin_base)
}

// uint32 height = 3;
inline void PCoinRecord::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PCoinRecord::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PCoinRecord::height() const {
  // @@protoc_insertion_point(field_get:PCoinRecord.height)
  return _internal_height();
}
inline void PCoinRecord::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void PCoinRecord::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PCoinRecord.height)
}

// repeated uint32 utxo = 4;
inline int PCoinRecord::_internal_utxo_size() const {
  return utxo_.size();
}
inline int PCoinRecord::utxo_size() const {
  return _internal_utxo_size();
}
inline void PCoinRecord::clear_utxo() {
  utxo_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PCoinRecord::_internal_utxo(int index) const {
  return utxo_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PCoinRecord::utxo(int index) const {
  // @@protoc_insertion_point(field_get:PCoinRecord.utxo)
  return _internal_utxo(index);
}
inline void PCoinRecord::set_utxo(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  utxo_.Set(index, value);
  // @@protoc_insertion_point(field_set:PCoinRecord.utxo)
}
inline void PCoinRecord::_internal_add_utxo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  utxo_.Add(value);
}
inline void PCoinRecord::add_utxo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_utxo(value);
  // @@protoc_insertion_point(field_add:PCoinRecord.utxo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PCoinRecord::_internal_utxo() const {
  return utxo_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PCoinRecord::utxo() const {
  // @@protoc_insertion_point(field_list:PCoinRecord.utxo)
  return _internal_utxo();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PCoinRecord::_internal_mutable_utxo() {
  return &utxo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PCoinRecord::mutable_utxo() {
  // @@protoc_insertion_point(field_mutable_list:PCoinRecord.utxo)
  return _internal_mutable_utxo();
}

// repeated uint32 amounts = 5;
inline int PCoinRecord::_internal_amounts_size() const {
  return amounts_.size();
}
inline int PCoinRecord::amounts_size() const {
  return _internal_amounts_size();
}
inline void PCoinRecord::clear_amounts() {
  amounts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PCoinRecord::_internal_amounts(int index) const {
  return amounts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PCoinRecord::amounts(int index) const {
  // @@protoc_insertion_point(field_get:PCoinRecord.amounts)
  return _internal_amounts(index);
}
inline void PCoinRecord::set_amounts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  amounts_.Set(index, value);
  // @@protoc_insertion_point(field_set:PCoinRecord.amounts)
}
inline void PCoinRecord::_internal_add_amounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  amounts_.Add(value);
}
inline void PCoinRecord::add_amounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_amounts(value);
  // @@protoc_insertion_point(field_add:PCoinRecord.amounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PCoinRecord::_internal_amounts() const {
  return amounts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PCoinRecord::amounts() const {
  // @@protoc_insertion_point(field_list:PCoinRecord.amounts)
  return _internal_amounts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PCoinRecord::_internal_mutable_amounts() {
  return &amounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PCoinRecord::mutable_amounts() {
  // @@protoc_insertion_point(field_mutable_list:PCoinRecord.amounts)
  return _internal_mutable_amounts();
}

// repeated uint32 public_keys = 6;
inline int PCoinRecord::_internal_public_keys_size() const {
  return public_keys_.size();
}
inline int PCoinRecord::public_keys_size() const {
  return _internal_public_keys_size();
}
inline void PCoinRecord::clear_public_keys() {
  public_keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PCoinRecord::_internal_public_keys(int index) const {
  return public_keys_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PCoinRecord::public_keys(int index) const {
  // @@protoc_insertion_point(field_get:PCoinRecord.public_keys)
  return _internal_public_keys(index);
}
inline void PCoinRecord::set_public_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  public_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:PCoinRecord.public_keys)
}
inline void PCoinRecord::_internal_add_public_keys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  public_keys_.Add(value);
}
inline void PCoinRecord::add_public_keys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_public_keys(value);
  // @@protoc_insertion_point(field_add:PCoinRecord.public_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PCoinRecord::_internal_public_keys() const {
  return public_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PCoinRecord::public_keys() const {
  // @@protoc_insertion_point(field_list:PCoinRecord.public_keys)
  return _internal_public_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PCoinRecord::_internal_mutable_public_keys() {
  return &public_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PCoinRecord::mutable_public_keys() {
  // @@protoc_insertion_point(field_mutable_list:PCoinRecord.public_keys)
  return _internal_mutable_public_keys();
}

// -------------------------------------------------------------------

// PUndoBlock

// repeated uint32 transaction_hashes = 1;
inline int PUndoBlock::_internal_transaction_hashes_size() const {
  return transaction_hashes_.size();
}
inline int PUndoBlock::transaction_hashes_size() const {
  return _internal_transaction_hashes_size();
}
inline void PUndoBlock::clear_transaction_hashes() {
  transaction_hashes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoBlock::_internal_transaction_hashes(int index) const {
  return transaction_hashes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoBlock::transaction_hashes(int index) const {
  // @@protoc_insertion_point(field_get:PUndoBlock.transaction_hashes)
  return _internal_transaction_hashes(index);
}
inline void PUndoBlock::set_transaction_hashes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  transaction_hashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:PUndoBlock.transaction_hashes)
}
inline void PUndoBlock::_internal_add_transaction_hashes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  transaction_hashes_.Add(value);
}
inline void PUndoBlock::add_transaction_hashes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_transaction_hashes(value);
  // @@protoc_insertion_point(field_add:PUndoBlock.transaction_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PUndoBlock::_internal_transaction_hashes() const {
  return transaction_hashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PUndoBlock::transaction_hashes() const {
  // @@protoc_insertion_point(field_list:PUndoBlock.transaction_hashes)
  return _internal_transaction_hashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PUndoBlock::_internal_mutable_transaction_hashes() {
  return &transaction_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PUndoBlock::mutable_transaction_hashes() {
  // @@protoc_insertion_point(field_mutable_list:PUndoBlock.transaction_hashes)
  return _internal_mutable_transaction_hashes();
}

// repeated .PUndoCoinRecord undo_coin_records = 2;
inline int PUndoBlock::_internal_undo_coin_records_size() const {
  return undo_coin_records_.size();
}
inline int PUndoBlock::undo_coin_records_size() const {
  return _internal_undo_coin_records_size();
}
inline void PUndoBlock::clear_undo_coin_records() {
  undo_coin_records_.Clear();
}
inline ::PUndoCoinRecord* PUndoBlock::mutable_undo_coin_records(int index) {
  // @@protoc_insertion_point(field_mutable:PUndoBlock.undo_coin_records)
  return undo_coin_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PUndoCoinRecord >*
PUndoBlock::mutable_undo_coin_records() {
  // @@protoc_insertion_point(field_mutable_list:PUndoBlock.undo_coin_records)
  return &undo_coin_records_;
}
inline const ::PUndoCoinRecord& PUndoBlock::_internal_undo_coin_records(int index) const {
  return undo_coin_records_.Get(index);
}
inline const ::PUndoCoinRecord& PUndoBlock::undo_coin_records(int index) const {
  // @@protoc_insertion_point(field_get:PUndoBlock.undo_coin_records)
  return _internal_undo_coin_records(index);
}
inline ::PUndoCoinRecord* PUndoBlock::_internal_add_undo_coin_records() {
  return undo_coin_records_.Add();
}
inline ::PUndoCoinRecord* PUndoBlock::add_undo_coin_records() {
  ::PUndoCoinRecord* _add = _internal_add_undo_coin_records();
  // @@protoc_insertion_point(field_add:PUndoBlock.undo_coin_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PUndoCoinRecord >&
PUndoBlock::undo_coin_records() const {
  // @@protoc_insertion_point(field_list:PUndoBlock.undo_coin_records)
  return undo_coin_records_;
}

// -------------------------------------------------------------------

// PBlock

// .PBlockHeader block_header = 1;
inline bool PBlock::_internal_has_block_header() const {
  return this != internal_default_instance() && block_header_ != nullptr;
}
inline bool PBlock::has_block_header() const {
  return _internal_has_block_header();
}
inline void PBlock::clear_block_header() {
  if (GetArenaForAllocation() == nullptr && block_header_ != nullptr) {
    delete block_header_;
  }
  block_header_ = nullptr;
}
inline const ::PBlockHeader& PBlock::_internal_block_header() const {
  const ::PBlockHeader* p = block_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::PBlockHeader&>(
      ::_PBlockHeader_default_instance_);
}
inline const ::PBlockHeader& PBlock::block_header() const {
  // @@protoc_insertion_point(field_get:PBlock.block_header)
  return _internal_block_header();
}
inline void PBlock::unsafe_arena_set_allocated_block_header(
    ::PBlockHeader* block_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_header_);
  }
  block_header_ = block_header;
  if (block_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PBlock.block_header)
}
inline ::PBlockHeader* PBlock::release_block_header() {
  
  ::PBlockHeader* temp = block_header_;
  block_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PBlockHeader* PBlock::unsafe_arena_release_block_header() {
  // @@protoc_insertion_point(field_release:PBlock.block_header)
  
  ::PBlockHeader* temp = block_header_;
  block_header_ = nullptr;
  return temp;
}
inline ::PBlockHeader* PBlock::_internal_mutable_block_header() {
  
  if (block_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::PBlockHeader>(GetArenaForAllocation());
    block_header_ = p;
  }
  return block_header_;
}
inline ::PBlockHeader* PBlock::mutable_block_header() {
  ::PBlockHeader* _msg = _internal_mutable_block_header();
  // @@protoc_insertion_point(field_mutable:PBlock.block_header)
  return _msg;
}
inline void PBlock::set_allocated_block_header(::PBlockHeader* block_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_header_;
  }
  if (block_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PBlockHeader>::GetOwningArena(block_header);
    if (message_arena != submessage_arena) {
      block_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_header, submessage_arena);
    }
    
  } else {
    
  }
  block_header_ = block_header;
  // @@protoc_insertion_point(field_set_allocated:PBlock.block_header)
}

// repeated .PTransaction transactions = 2;
inline int PBlock::_internal_transactions_size() const {
  return transactions_.size();
}
inline int PBlock::transactions_size() const {
  return _internal_transactions_size();
}
inline void PBlock::clear_transactions() {
  transactions_.Clear();
}
inline ::PTransaction* PBlock::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:PBlock.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransaction >*
PBlock::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:PBlock.transactions)
  return &transactions_;
}
inline const ::PTransaction& PBlock::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::PTransaction& PBlock::transactions(int index) const {
  // @@protoc_insertion_point(field_get:PBlock.transactions)
  return _internal_transactions(index);
}
inline ::PTransaction* PBlock::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::PTransaction* PBlock::add_transactions() {
  ::PTransaction* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:PBlock.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransaction >&
PBlock::transactions() const {
  // @@protoc_insertion_point(field_list:PBlock.transactions)
  return transactions_;
}

// uint32 hash = 3;
inline void PBlock::clear_hash() {
  hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlock::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlock::hash() const {
  // @@protoc_insertion_point(field_get:PBlock.hash)
  return _internal_hash();
}
inline void PBlock::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hash_ = value;
}
inline void PBlock::set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:PBlock.hash)
}

// uint32 calculate_fees = 4;
inline void PBlock::clear_calculate_fees() {
  calculate_fees_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlock::_internal_calculate_fees() const {
  return calculate_fees_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlock::calculate_fees() const {
  // @@protoc_insertion_point(field_get:PBlock.calculate_fees)
  return _internal_calculate_fees();
}
inline void PBlock::_internal_set_calculate_fees(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  calculate_fees_ = value;
}
inline void PBlock::set_calculate_fees(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_calculate_fees(value);
  // @@protoc_insertion_point(field_set:PBlock.calculate_fees)
}

// uint32 obtain_merkle_root = 5;
inline void PBlock::clear_obtain_merkle_root() {
  obtain_merkle_root_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlock::_internal_obtain_merkle_root() const {
  return obtain_merkle_root_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlock::obtain_merkle_root() const {
  // @@protoc_insertion_point(field_get:PBlock.obtain_merkle_root)
  return _internal_obtain_merkle_root();
}
inline void PBlock::_internal_set_obtain_merkle_root(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  obtain_merkle_root_ = value;
}
inline void PBlock::set_obtain_merkle_root(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_obtain_merkle_root(value);
  // @@protoc_insertion_point(field_set:PBlock.obtain_merkle_root)
}

// -------------------------------------------------------------------

// PBlockHeader

// uint32 version = 1;
inline void PBlockHeader::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::version() const {
  // @@protoc_insertion_point(field_get:PBlockHeader.version)
  return _internal_version();
}
inline void PBlockHeader::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void PBlockHeader::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:PBlockHeader.version)
}

// uint32 previous_block_hash = 2;
inline void PBlockHeader::clear_previous_block_hash() {
  previous_block_hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::_internal_previous_block_hash() const {
  return previous_block_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::previous_block_hash() const {
  // @@protoc_insertion_point(field_get:PBlockHeader.previous_block_hash)
  return _internal_previous_block_hash();
}
inline void PBlockHeader::_internal_set_previous_block_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  previous_block_hash_ = value;
}
inline void PBlockHeader::set_previous_block_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_previous_block_hash(value);
  // @@protoc_insertion_point(field_set:PBlockHeader.previous_block_hash)
}

// uint32 merkle_root = 3;
inline void PBlockHeader::clear_merkle_root() {
  merkle_root_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::_internal_merkle_root() const {
  return merkle_root_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::merkle_root() const {
  // @@protoc_insertion_point(field_get:PBlockHeader.merkle_root)
  return _internal_merkle_root();
}
inline void PBlockHeader::_internal_set_merkle_root(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  merkle_root_ = value;
}
inline void PBlockHeader::set_merkle_root(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_merkle_root(value);
  // @@protoc_insertion_point(field_set:PBlockHeader.merkle_root)
}

// uint32 difficulty_target = 4;
inline void PBlockHeader::clear_difficulty_target() {
  difficulty_target_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::_internal_difficulty_target() const {
  return difficulty_target_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::difficulty_target() const {
  // @@protoc_insertion_point(field_get:PBlockHeader.difficulty_target)
  return _internal_difficulty_target();
}
inline void PBlockHeader::_internal_set_difficulty_target(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  difficulty_target_ = value;
}
inline void PBlockHeader::set_difficulty_target(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_difficulty_target(value);
  // @@protoc_insertion_point(field_set:PBlockHeader.difficulty_target)
}

// uint32 nonce = 5;
inline void PBlockHeader::clear_nonce() {
  nonce_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::nonce() const {
  // @@protoc_insertion_point(field_get:PBlockHeader.nonce)
  return _internal_nonce();
}
inline void PBlockHeader::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nonce_ = value;
}
inline void PBlockHeader::set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:PBlockHeader.nonce)
}

// uint32 timestamp = 6;
inline void PBlockHeader::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PBlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:PBlockHeader.timestamp)
  return _internal_timestamp();
}
inline void PBlockHeader::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void PBlockHeader::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:PBlockHeader.timestamp)
}

// -------------------------------------------------------------------

// PTransaction

// uint32 version = 1;
inline void PTransaction::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransaction::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransaction::version() const {
  // @@protoc_insertion_point(field_get:PTransaction.version)
  return _internal_version();
}
inline void PTransaction::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void PTransaction::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:PTransaction.version)
}

// repeated .PTransactionInput transaction_inputs = 2;
inline int PTransaction::_internal_transaction_inputs_size() const {
  return transaction_inputs_.size();
}
inline int PTransaction::transaction_inputs_size() const {
  return _internal_transaction_inputs_size();
}
inline void PTransaction::clear_transaction_inputs() {
  transaction_inputs_.Clear();
}
inline ::PTransactionInput* PTransaction::mutable_transaction_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:PTransaction.transaction_inputs)
  return transaction_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransactionInput >*
PTransaction::mutable_transaction_inputs() {
  // @@protoc_insertion_point(field_mutable_list:PTransaction.transaction_inputs)
  return &transaction_inputs_;
}
inline const ::PTransactionInput& PTransaction::_internal_transaction_inputs(int index) const {
  return transaction_inputs_.Get(index);
}
inline const ::PTransactionInput& PTransaction::transaction_inputs(int index) const {
  // @@protoc_insertion_point(field_get:PTransaction.transaction_inputs)
  return _internal_transaction_inputs(index);
}
inline ::PTransactionInput* PTransaction::_internal_add_transaction_inputs() {
  return transaction_inputs_.Add();
}
inline ::PTransactionInput* PTransaction::add_transaction_inputs() {
  ::PTransactionInput* _add = _internal_add_transaction_inputs();
  // @@protoc_insertion_point(field_add:PTransaction.transaction_inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransactionInput >&
PTransaction::transaction_inputs() const {
  // @@protoc_insertion_point(field_list:PTransaction.transaction_inputs)
  return transaction_inputs_;
}

// repeated .PTransactionOutput transaction_outputs = 3;
inline int PTransaction::_internal_transaction_outputs_size() const {
  return transaction_outputs_.size();
}
inline int PTransaction::transaction_outputs_size() const {
  return _internal_transaction_outputs_size();
}
inline void PTransaction::clear_transaction_outputs() {
  transaction_outputs_.Clear();
}
inline ::PTransactionOutput* PTransaction::mutable_transaction_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:PTransaction.transaction_outputs)
  return transaction_outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransactionOutput >*
PTransaction::mutable_transaction_outputs() {
  // @@protoc_insertion_point(field_mutable_list:PTransaction.transaction_outputs)
  return &transaction_outputs_;
}
inline const ::PTransactionOutput& PTransaction::_internal_transaction_outputs(int index) const {
  return transaction_outputs_.Get(index);
}
inline const ::PTransactionOutput& PTransaction::transaction_outputs(int index) const {
  // @@protoc_insertion_point(field_get:PTransaction.transaction_outputs)
  return _internal_transaction_outputs(index);
}
inline ::PTransactionOutput* PTransaction::_internal_add_transaction_outputs() {
  return transaction_outputs_.Add();
}
inline ::PTransactionOutput* PTransaction::add_transaction_outputs() {
  ::PTransactionOutput* _add = _internal_add_transaction_outputs();
  // @@protoc_insertion_point(field_add:PTransaction.transaction_outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PTransactionOutput >&
PTransaction::transaction_outputs() const {
  // @@protoc_insertion_point(field_list:PTransaction.transaction_outputs)
  return transaction_outputs_;
}

// uint32 lock_time = 4;
inline void PTransaction::clear_lock_time() {
  lock_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransaction::_internal_lock_time() const {
  return lock_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransaction::lock_time() const {
  // @@protoc_insertion_point(field_get:PTransaction.lock_time)
  return _internal_lock_time();
}
inline void PTransaction::_internal_set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lock_time_ = value;
}
inline void PTransaction::set_lock_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lock_time(value);
  // @@protoc_insertion_point(field_set:PTransaction.lock_time)
}

// -------------------------------------------------------------------

// PTransactionInput

// uint32 reference_transaction_hash = 1;
inline void PTransactionInput::clear_reference_transaction_hash() {
  reference_transaction_hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransactionInput::_internal_reference_transaction_hash() const {
  return reference_transaction_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransactionInput::reference_transaction_hash() const {
  // @@protoc_insertion_point(field_get:PTransactionInput.reference_transaction_hash)
  return _internal_reference_transaction_hash();
}
inline void PTransactionInput::_internal_set_reference_transaction_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reference_transaction_hash_ = value;
}
inline void PTransactionInput::set_reference_transaction_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reference_transaction_hash(value);
  // @@protoc_insertion_point(field_set:PTransactionInput.reference_transaction_hash)
}

// uint32 utxo_index = 2;
inline void PTransactionInput::clear_utxo_index() {
  utxo_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransactionInput::_internal_utxo_index() const {
  return utxo_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransactionInput::utxo_index() const {
  // @@protoc_insertion_point(field_get:PTransactionInput.utxo_index)
  return _internal_utxo_index();
}
inline void PTransactionInput::_internal_set_utxo_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utxo_index_ = value;
}
inline void PTransactionInput::set_utxo_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utxo_index(value);
  // @@protoc_insertion_point(field_set:PTransactionInput.utxo_index)
}

// uint32 signature = 3;
inline void PTransactionInput::clear_signature() {
  signature_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransactionInput::_internal_signature() const {
  return signature_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransactionInput::signature() const {
  // @@protoc_insertion_point(field_get:PTransactionInput.signature)
  return _internal_signature();
}
inline void PTransactionInput::_internal_set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  signature_ = value;
}
inline void PTransactionInput::set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:PTransactionInput.signature)
}

// -------------------------------------------------------------------

// PTransactionOutput

// uint32 amount = 1;
inline void PTransactionOutput::clear_amount() {
  amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransactionOutput::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransactionOutput::amount() const {
  // @@protoc_insertion_point(field_get:PTransactionOutput.amount)
  return _internal_amount();
}
inline void PTransactionOutput::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  amount_ = value;
}
inline void PTransactionOutput::set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:PTransactionOutput.amount)
}

// uint32 public_key = 2;
inline void PTransactionOutput::clear_public_key() {
  public_key_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransactionOutput::_internal_public_key() const {
  return public_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PTransactionOutput::public_key() const {
  // @@protoc_insertion_point(field_get:PTransactionOutput.public_key)
  return _internal_public_key();
}
inline void PTransactionOutput::_internal_set_public_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  public_key_ = value;
}
inline void PTransactionOutput::set_public_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:PTransactionOutput.public_key)
}

// -------------------------------------------------------------------

// PUndoCoinRecord

// uint32 version = 1;
inline void PUndoCoinRecord::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoCoinRecord::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoCoinRecord::version() const {
  // @@protoc_insertion_point(field_get:PUndoCoinRecord.version)
  return _internal_version();
}
inline void PUndoCoinRecord::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void PUndoCoinRecord::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:PUndoCoinRecord.version)
}

// bool is_coin_base = 2;
inline void PUndoCoinRecord::clear_is_coin_base() {
  is_coin_base_ = false;
}
inline bool PUndoCoinRecord::_internal_is_coin_base() const {
  return is_coin_base_;
}
inline bool PUndoCoinRecord::is_coin_base() const {
  // @@protoc_insertion_point(field_get:PUndoCoinRecord.is_coin_base)
  return _internal_is_coin_base();
}
inline void PUndoCoinRecord::_internal_set_is_coin_base(bool value) {
  
  is_coin_base_ = value;
}
inline void PUndoCoinRecord::set_is_coin_base(bool value) {
  _internal_set_is_coin_base(value);
  // @@protoc_insertion_point(field_set:PUndoCoinRecord.is_coin_base)
}

// uint32 height = 3;
inline void PUndoCoinRecord::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoCoinRecord::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoCoinRecord::height() const {
  // @@protoc_insertion_point(field_get:PUndoCoinRecord.height)
  return _internal_height();
}
inline void PUndoCoinRecord::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void PUndoCoinRecord::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PUndoCoinRecord.height)
}

// repeated uint32 utxo = 4;
inline int PUndoCoinRecord::_internal_utxo_size() const {
  return utxo_.size();
}
inline int PUndoCoinRecord::utxo_size() const {
  return _internal_utxo_size();
}
inline void PUndoCoinRecord::clear_utxo() {
  utxo_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoCoinRecord::_internal_utxo(int index) const {
  return utxo_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoCoinRecord::utxo(int index) const {
  // @@protoc_insertion_point(field_get:PUndoCoinRecord.utxo)
  return _internal_utxo(index);
}
inline void PUndoCoinRecord::set_utxo(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  utxo_.Set(index, value);
  // @@protoc_insertion_point(field_set:PUndoCoinRecord.utxo)
}
inline void PUndoCoinRecord::_internal_add_utxo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  utxo_.Add(value);
}
inline void PUndoCoinRecord::add_utxo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_utxo(value);
  // @@protoc_insertion_point(field_add:PUndoCoinRecord.utxo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PUndoCoinRecord::_internal_utxo() const {
  return utxo_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PUndoCoinRecord::utxo() const {
  // @@protoc_insertion_point(field_list:PUndoCoinRecord.utxo)
  return _internal_utxo();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PUndoCoinRecord::_internal_mutable_utxo() {
  return &utxo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PUndoCoinRecord::mutable_utxo() {
  // @@protoc_insertion_point(field_mutable_list:PUndoCoinRecord.utxo)
  return _internal_mutable_utxo();
}

// repeated uint32 amounts = 5;
inline int PUndoCoinRecord::_internal_amounts_size() const {
  return amounts_.size();
}
inline int PUndoCoinRecord::amounts_size() const {
  return _internal_amounts_size();
}
inline void PUndoCoinRecord::clear_amounts() {
  amounts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoCoinRecord::_internal_amounts(int index) const {
  return amounts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoCoinRecord::amounts(int index) const {
  // @@protoc_insertion_point(field_get:PUndoCoinRecord.amounts)
  return _internal_amounts(index);
}
inline void PUndoCoinRecord::set_amounts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  amounts_.Set(index, value);
  // @@protoc_insertion_point(field_set:PUndoCoinRecord.amounts)
}
inline void PUndoCoinRecord::_internal_add_amounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  amounts_.Add(value);
}
inline void PUndoCoinRecord::add_amounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_amounts(value);
  // @@protoc_insertion_point(field_add:PUndoCoinRecord.amounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PUndoCoinRecord::_internal_amounts() const {
  return amounts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PUndoCoinRecord::amounts() const {
  // @@protoc_insertion_point(field_list:PUndoCoinRecord.amounts)
  return _internal_amounts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PUndoCoinRecord::_internal_mutable_amounts() {
  return &amounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PUndoCoinRecord::mutable_amounts() {
  // @@protoc_insertion_point(field_mutable_list:PUndoCoinRecord.amounts)
  return _internal_mutable_amounts();
}

// repeated uint32 public_keys = 6;
inline int PUndoCoinRecord::_internal_public_keys_size() const {
  return public_keys_.size();
}
inline int PUndoCoinRecord::public_keys_size() const {
  return _internal_public_keys_size();
}
inline void PUndoCoinRecord::clear_public_keys() {
  public_keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoCoinRecord::_internal_public_keys(int index) const {
  return public_keys_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PUndoCoinRecord::public_keys(int index) const {
  // @@protoc_insertion_point(field_get:PUndoCoinRecord.public_keys)
  return _internal_public_keys(index);
}
inline void PUndoCoinRecord::set_public_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  public_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:PUndoCoinRecord.public_keys)
}
inline void PUndoCoinRecord::_internal_add_public_keys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  public_keys_.Add(value);
}
inline void PUndoCoinRecord::add_public_keys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_public_keys(value);
  // @@protoc_insertion_point(field_add:PUndoCoinRecord.public_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PUndoCoinRecord::_internal_public_keys() const {
  return public_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PUndoCoinRecord::public_keys() const {
  // @@protoc_insertion_point(field_list:PUndoCoinRecord.public_keys)
  return _internal_public_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PUndoCoinRecord::_internal_mutable_public_keys() {
  return &public_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PUndoCoinRecord::mutable_public_keys() {
  // @@protoc_insertion_point(field_mutable_list:PUndoCoinRecord.public_keys)
  return _internal_mutable_public_keys();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rath_2eproto
