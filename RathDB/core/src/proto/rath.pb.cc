// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rath.proto

#include "rath.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr PBlockRecord::PBlockRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_file_stored_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , undo_file_stored_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_header_(nullptr)
  , height_(0u)
  , num_transactions_(0u)
  , block_offset_start_(0u)
  , block_offset_end_(0u)
  , undo_offset_start_(0u)
  , undo_offset_end_(0u){}
struct PBlockRecordDefaultTypeInternal {
  constexpr PBlockRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PBlockRecordDefaultTypeInternal() {}
  union {
    PBlockRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PBlockRecordDefaultTypeInternal _PBlockRecord_default_instance_;
constexpr PCoinRecord::PCoinRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : utxo_()
  , _utxo_cached_byte_size_(0)
  , amounts_()
  , _amounts_cached_byte_size_(0)
  , public_keys_()
  , _public_keys_cached_byte_size_(0)
  , version_(0u)
  , is_coin_base_(false)
  , height_(0u){}
struct PCoinRecordDefaultTypeInternal {
  constexpr PCoinRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PCoinRecordDefaultTypeInternal() {}
  union {
    PCoinRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PCoinRecordDefaultTypeInternal _PCoinRecord_default_instance_;
constexpr PUndoBlock::PUndoBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_hashes_()
  , _transaction_hashes_cached_byte_size_(0)
  , undo_coin_records_(){}
struct PUndoBlockDefaultTypeInternal {
  constexpr PUndoBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PUndoBlockDefaultTypeInternal() {}
  union {
    PUndoBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PUndoBlockDefaultTypeInternal _PUndoBlock_default_instance_;
constexpr PBlock::PBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , block_header_(nullptr)
  , hash_(0u)
  , calculate_fees_(0u)
  , obtain_merkle_root_(0u){}
struct PBlockDefaultTypeInternal {
  constexpr PBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PBlockDefaultTypeInternal() {}
  union {
    PBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PBlockDefaultTypeInternal _PBlock_default_instance_;
constexpr PBlockHeader::PBlockHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(0u)
  , previous_block_hash_(0u)
  , merkle_root_(0u)
  , difficulty_target_(0u)
  , nonce_(0u)
  , timestamp_(0u){}
struct PBlockHeaderDefaultTypeInternal {
  constexpr PBlockHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PBlockHeaderDefaultTypeInternal() {}
  union {
    PBlockHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PBlockHeaderDefaultTypeInternal _PBlockHeader_default_instance_;
constexpr PTransaction::PTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_inputs_()
  , transaction_outputs_()
  , version_(0u)
  , lock_time_(0u){}
struct PTransactionDefaultTypeInternal {
  constexpr PTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PTransactionDefaultTypeInternal() {}
  union {
    PTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PTransactionDefaultTypeInternal _PTransaction_default_instance_;
constexpr PTransactionInput::PTransactionInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_transaction_hash_(0u)
  , utxo_index_(0u)
  , signature_(0u){}
struct PTransactionInputDefaultTypeInternal {
  constexpr PTransactionInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PTransactionInputDefaultTypeInternal() {}
  union {
    PTransactionInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PTransactionInputDefaultTypeInternal _PTransactionInput_default_instance_;
constexpr PTransactionOutput::PTransactionOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(0u)
  , public_key_(0u){}
struct PTransactionOutputDefaultTypeInternal {
  constexpr PTransactionOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PTransactionOutputDefaultTypeInternal() {}
  union {
    PTransactionOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PTransactionOutputDefaultTypeInternal _PTransactionOutput_default_instance_;
constexpr PUndoCoinRecord::PUndoCoinRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : utxo_()
  , _utxo_cached_byte_size_(0)
  , amounts_()
  , _amounts_cached_byte_size_(0)
  , public_keys_()
  , _public_keys_cached_byte_size_(0)
  , version_(0u)
  , is_coin_base_(false)
  , height_(0u){}
struct PUndoCoinRecordDefaultTypeInternal {
  constexpr PUndoCoinRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PUndoCoinRecordDefaultTypeInternal() {}
  union {
    PUndoCoinRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PUndoCoinRecordDefaultTypeInternal _PUndoCoinRecord_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rath_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rath_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rath_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rath_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBlockRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBlockRecord, block_header_),
  PROTOBUF_FIELD_OFFSET(::PBlockRecord, height_),
  PROTOBUF_FIELD_OFFSET(::PBlockRecord, num_transactions_),
  PROTOBUF_FIELD_OFFSET(::PBlockRecord, block_file_stored_),
  PROTOBUF_FIELD_OFFSET(::PBlockRecord, block_offset_start_),
  PROTOBUF_FIELD_OFFSET(::PBlockRecord, block_offset_end_),
  PROTOBUF_FIELD_OFFSET(::PBlockRecord, undo_file_stored_),
  PROTOBUF_FIELD_OFFSET(::PBlockRecord, undo_offset_start_),
  PROTOBUF_FIELD_OFFSET(::PBlockRecord, undo_offset_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PCoinRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PCoinRecord, version_),
  PROTOBUF_FIELD_OFFSET(::PCoinRecord, is_coin_base_),
  PROTOBUF_FIELD_OFFSET(::PCoinRecord, height_),
  PROTOBUF_FIELD_OFFSET(::PCoinRecord, utxo_),
  PROTOBUF_FIELD_OFFSET(::PCoinRecord, amounts_),
  PROTOBUF_FIELD_OFFSET(::PCoinRecord, public_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PUndoBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PUndoBlock, transaction_hashes_),
  PROTOBUF_FIELD_OFFSET(::PUndoBlock, undo_coin_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBlock, block_header_),
  PROTOBUF_FIELD_OFFSET(::PBlock, transactions_),
  PROTOBUF_FIELD_OFFSET(::PBlock, hash_),
  PROTOBUF_FIELD_OFFSET(::PBlock, calculate_fees_),
  PROTOBUF_FIELD_OFFSET(::PBlock, obtain_merkle_root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PBlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PBlockHeader, version_),
  PROTOBUF_FIELD_OFFSET(::PBlockHeader, previous_block_hash_),
  PROTOBUF_FIELD_OFFSET(::PBlockHeader, merkle_root_),
  PROTOBUF_FIELD_OFFSET(::PBlockHeader, difficulty_target_),
  PROTOBUF_FIELD_OFFSET(::PBlockHeader, nonce_),
  PROTOBUF_FIELD_OFFSET(::PBlockHeader, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PTransaction, version_),
  PROTOBUF_FIELD_OFFSET(::PTransaction, transaction_inputs_),
  PROTOBUF_FIELD_OFFSET(::PTransaction, transaction_outputs_),
  PROTOBUF_FIELD_OFFSET(::PTransaction, lock_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PTransactionInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PTransactionInput, reference_transaction_hash_),
  PROTOBUF_FIELD_OFFSET(::PTransactionInput, utxo_index_),
  PROTOBUF_FIELD_OFFSET(::PTransactionInput, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PTransactionOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PTransactionOutput, amount_),
  PROTOBUF_FIELD_OFFSET(::PTransactionOutput, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PUndoCoinRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PUndoCoinRecord, version_),
  PROTOBUF_FIELD_OFFSET(::PUndoCoinRecord, is_coin_base_),
  PROTOBUF_FIELD_OFFSET(::PUndoCoinRecord, height_),
  PROTOBUF_FIELD_OFFSET(::PUndoCoinRecord, utxo_),
  PROTOBUF_FIELD_OFFSET(::PUndoCoinRecord, amounts_),
  PROTOBUF_FIELD_OFFSET(::PUndoCoinRecord, public_keys_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PBlockRecord)},
  { 14, -1, sizeof(::PCoinRecord)},
  { 25, -1, sizeof(::PUndoBlock)},
  { 32, -1, sizeof(::PBlock)},
  { 42, -1, sizeof(::PBlockHeader)},
  { 53, -1, sizeof(::PTransaction)},
  { 62, -1, sizeof(::PTransactionInput)},
  { 70, -1, sizeof(::PTransactionOutput)},
  { 77, -1, sizeof(::PUndoCoinRecord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBlockRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PCoinRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PUndoBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PBlockHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PTransactionInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PTransactionOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PUndoCoinRecord_default_instance_),
};

const char descriptor_table_protodef_rath_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nrath.proto\"\374\001\n\014PBlockRecord\022#\n\014block_h"
  "eader\030\001 \001(\0132\r.PBlockHeader\022\016\n\006height\030\002 \001"
  "(\r\022\030\n\020num_transactions\030\003 \001(\r\022\031\n\021block_fi"
  "le_stored\030\004 \001(\t\022\032\n\022block_offset_start\030\005 "
  "\001(\r\022\030\n\020block_offset_end\030\006 \001(\r\022\030\n\020undo_fi"
  "le_stored\030\007 \001(\t\022\031\n\021undo_offset_start\030\010 \001"
  "(\r\022\027\n\017undo_offset_end\030\t \001(\r\"x\n\013PCoinReco"
  "rd\022\017\n\007version\030\001 \001(\r\022\024\n\014is_coin_base\030\002 \001("
  "\010\022\016\n\006height\030\003 \001(\r\022\014\n\004utxo\030\004 \003(\r\022\017\n\007amoun"
  "ts\030\005 \003(\r\022\023\n\013public_keys\030\006 \003(\r\"U\n\nPUndoBl"
  "ock\022\032\n\022transaction_hashes\030\001 \003(\r\022+\n\021undo_"
  "coin_records\030\002 \003(\0132\020.PUndoCoinRecord\"\224\001\n"
  "\006PBlock\022#\n\014block_header\030\001 \001(\0132\r.PBlockHe"
  "ader\022#\n\014transactions\030\002 \003(\0132\r.PTransactio"
  "n\022\014\n\004hash\030\003 \001(\r\022\026\n\016calculate_fees\030\004 \001(\r\022"
  "\032\n\022obtain_merkle_root\030\005 \001(\r\"\216\001\n\014PBlockHe"
  "ader\022\017\n\007version\030\001 \001(\r\022\033\n\023previous_block_"
  "hash\030\002 \001(\r\022\023\n\013merkle_root\030\003 \001(\r\022\031\n\021diffi"
  "culty_target\030\004 \001(\r\022\r\n\005nonce\030\005 \001(\r\022\021\n\ttim"
  "estamp\030\006 \001(\r\"\224\001\n\014PTransaction\022\017\n\007version"
  "\030\001 \001(\r\022.\n\022transaction_inputs\030\002 \003(\0132\022.PTr"
  "ansactionInput\0220\n\023transaction_outputs\030\003 "
  "\003(\0132\023.PTransactionOutput\022\021\n\tlock_time\030\004 "
  "\001(\r\"^\n\021PTransactionInput\022\"\n\032reference_tr"
  "ansaction_hash\030\001 \001(\r\022\022\n\nutxo_index\030\002 \001(\r"
  "\022\021\n\tsignature\030\003 \001(\r\"8\n\022PTransactionOutpu"
  "t\022\016\n\006amount\030\001 \001(\r\022\022\n\npublic_key\030\002 \001(\r\"|\n"
  "\017PUndoCoinRecord\022\017\n\007version\030\001 \001(\r\022\024\n\014is_"
  "coin_base\030\002 \001(\010\022\016\n\006height\030\003 \001(\r\022\014\n\004utxo\030"
  "\004 \003(\r\022\017\n\007amounts\030\005 \003(\r\022\023\n\013public_keys\030\006 "
  "\003(\rb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rath_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rath_2eproto = {
  false, false, 1211, descriptor_table_protodef_rath_2eproto, "rath.proto", 
  &descriptor_table_rath_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_rath_2eproto::offsets,
  file_level_metadata_rath_2eproto, file_level_enum_descriptors_rath_2eproto, file_level_service_descriptors_rath_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_rath_2eproto_getter() {
  return &descriptor_table_rath_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_rath_2eproto(&descriptor_table_rath_2eproto);

// ===================================================================

class PBlockRecord::_Internal {
 public:
  static const ::PBlockHeader& block_header(const PBlockRecord* msg);
};

const ::PBlockHeader&
PBlockRecord::_Internal::block_header(const PBlockRecord* msg) {
  return *msg->block_header_;
}
PBlockRecord::PBlockRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PBlockRecord)
}
PBlockRecord::PBlockRecord(const PBlockRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_file_stored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_file_stored().empty()) {
    block_file_stored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_file_stored(), 
      GetArenaForAllocation());
  }
  undo_file_stored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_undo_file_stored().empty()) {
    undo_file_stored_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_undo_file_stored(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_block_header()) {
    block_header_ = new ::PBlockHeader(*from.block_header_);
  } else {
    block_header_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&undo_offset_end_) -
    reinterpret_cast<char*>(&height_)) + sizeof(undo_offset_end_));
  // @@protoc_insertion_point(copy_constructor:PBlockRecord)
}

inline void PBlockRecord::SharedCtor() {
block_file_stored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
undo_file_stored_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&undo_offset_end_) -
    reinterpret_cast<char*>(&block_header_)) + sizeof(undo_offset_end_));
}

PBlockRecord::~PBlockRecord() {
  // @@protoc_insertion_point(destructor:PBlockRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PBlockRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_file_stored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  undo_file_stored_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_header_;
}

void PBlockRecord::ArenaDtor(void* object) {
  PBlockRecord* _this = reinterpret_cast< PBlockRecord* >(object);
  (void)_this;
}
void PBlockRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBlockRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PBlockRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PBlockRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_file_stored_.ClearToEmpty();
  undo_file_stored_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && block_header_ != nullptr) {
    delete block_header_;
  }
  block_header_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&undo_offset_end_) -
      reinterpret_cast<char*>(&height_)) + sizeof(undo_offset_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBlockRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PBlockHeader block_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_transactions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string block_file_stored = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_block_file_stored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBlockRecord.block_file_stored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_offset_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          block_offset_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_offset_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          block_offset_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string undo_file_stored = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_undo_file_stored();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PBlockRecord.undo_file_stored"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 undo_offset_start = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          undo_offset_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 undo_offset_end = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          undo_offset_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBlockRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBlockRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBlockHeader block_header = 1;
  if (this->_internal_has_block_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block_header(this), target, stream);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // uint32 num_transactions = 3;
  if (this->_internal_num_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_transactions(), target);
  }

  // string block_file_stored = 4;
  if (!this->_internal_block_file_stored().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_file_stored().data(), static_cast<int>(this->_internal_block_file_stored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBlockRecord.block_file_stored");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_block_file_stored(), target);
  }

  // uint32 block_offset_start = 5;
  if (this->_internal_block_offset_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_block_offset_start(), target);
  }

  // uint32 block_offset_end = 6;
  if (this->_internal_block_offset_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_block_offset_end(), target);
  }

  // string undo_file_stored = 7;
  if (!this->_internal_undo_file_stored().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_undo_file_stored().data(), static_cast<int>(this->_internal_undo_file_stored().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PBlockRecord.undo_file_stored");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_undo_file_stored(), target);
  }

  // uint32 undo_offset_start = 8;
  if (this->_internal_undo_offset_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_undo_offset_start(), target);
  }

  // uint32 undo_offset_end = 9;
  if (this->_internal_undo_offset_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_undo_offset_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBlockRecord)
  return target;
}

size_t PBlockRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBlockRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string block_file_stored = 4;
  if (!this->_internal_block_file_stored().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_file_stored());
  }

  // string undo_file_stored = 7;
  if (!this->_internal_undo_file_stored().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_undo_file_stored());
  }

  // .PBlockHeader block_header = 1;
  if (this->_internal_has_block_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_header_);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  // uint32 num_transactions = 3;
  if (this->_internal_num_transactions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_transactions());
  }

  // uint32 block_offset_start = 5;
  if (this->_internal_block_offset_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_offset_start());
  }

  // uint32 block_offset_end = 6;
  if (this->_internal_block_offset_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_offset_end());
  }

  // uint32 undo_offset_start = 8;
  if (this->_internal_undo_offset_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undo_offset_start());
  }

  // uint32 undo_offset_end = 9;
  if (this->_internal_undo_offset_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undo_offset_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBlockRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PBlockRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBlockRecord::GetClassData() const { return &_class_data_; }

void PBlockRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PBlockRecord *>(to)->MergeFrom(
      static_cast<const PBlockRecord &>(from));
}


void PBlockRecord::MergeFrom(const PBlockRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBlockRecord)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_file_stored().empty()) {
    _internal_set_block_file_stored(from._internal_block_file_stored());
  }
  if (!from._internal_undo_file_stored().empty()) {
    _internal_set_undo_file_stored(from._internal_undo_file_stored());
  }
  if (from._internal_has_block_header()) {
    _internal_mutable_block_header()->::PBlockHeader::MergeFrom(from._internal_block_header());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_num_transactions() != 0) {
    _internal_set_num_transactions(from._internal_num_transactions());
  }
  if (from._internal_block_offset_start() != 0) {
    _internal_set_block_offset_start(from._internal_block_offset_start());
  }
  if (from._internal_block_offset_end() != 0) {
    _internal_set_block_offset_end(from._internal_block_offset_end());
  }
  if (from._internal_undo_offset_start() != 0) {
    _internal_set_undo_offset_start(from._internal_undo_offset_start());
  }
  if (from._internal_undo_offset_end() != 0) {
    _internal_set_undo_offset_end(from._internal_undo_offset_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBlockRecord::CopyFrom(const PBlockRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBlockRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBlockRecord::IsInitialized() const {
  return true;
}

void PBlockRecord::InternalSwap(PBlockRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_file_stored_, GetArenaForAllocation(),
      &other->block_file_stored_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &undo_file_stored_, GetArenaForAllocation(),
      &other->undo_file_stored_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBlockRecord, undo_offset_end_)
      + sizeof(PBlockRecord::undo_offset_end_)
      - PROTOBUF_FIELD_OFFSET(PBlockRecord, block_header_)>(
          reinterpret_cast<char*>(&block_header_),
          reinterpret_cast<char*>(&other->block_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBlockRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rath_2eproto_getter, &descriptor_table_rath_2eproto_once,
      file_level_metadata_rath_2eproto[0]);
}

// ===================================================================

class PCoinRecord::_Internal {
 public:
};

PCoinRecord::PCoinRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  utxo_(arena),
  amounts_(arena),
  public_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PCoinRecord)
}
PCoinRecord::PCoinRecord(const PCoinRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      utxo_(from.utxo_),
      amounts_(from.amounts_),
      public_keys_(from.public_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&version_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:PCoinRecord)
}

inline void PCoinRecord::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&version_)) + sizeof(height_));
}

PCoinRecord::~PCoinRecord() {
  // @@protoc_insertion_point(destructor:PCoinRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PCoinRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PCoinRecord::ArenaDtor(void* object) {
  PCoinRecord* _this = reinterpret_cast< PCoinRecord* >(object);
  (void)_this;
}
void PCoinRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCoinRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PCoinRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PCoinRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utxo_.Clear();
  amounts_.Clear();
  public_keys_.Clear();
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&version_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCoinRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_coin_base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_coin_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 utxo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_utxo(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_utxo(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 amounts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_amounts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_amounts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 public_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_public_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_public_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PCoinRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PCoinRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // bool is_coin_base = 2;
  if (this->_internal_is_coin_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_coin_base(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // repeated uint32 utxo = 4;
  {
    int byte_size = _utxo_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_utxo(), byte_size, target);
    }
  }

  // repeated uint32 amounts = 5;
  {
    int byte_size = _amounts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_amounts(), byte_size, target);
    }
  }

  // repeated uint32 public_keys = 6;
  {
    int byte_size = _public_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_public_keys(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PCoinRecord)
  return target;
}

size_t PCoinRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PCoinRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 utxo = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->utxo_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _utxo_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 amounts = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->amounts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _amounts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 public_keys = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->public_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _public_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // bool is_coin_base = 2;
  if (this->_internal_is_coin_base() != 0) {
    total_size += 1 + 1;
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCoinRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PCoinRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCoinRecord::GetClassData() const { return &_class_data_; }

void PCoinRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PCoinRecord *>(to)->MergeFrom(
      static_cast<const PCoinRecord &>(from));
}


void PCoinRecord::MergeFrom(const PCoinRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PCoinRecord)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  utxo_.MergeFrom(from.utxo_);
  amounts_.MergeFrom(from.amounts_);
  public_keys_.MergeFrom(from.public_keys_);
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_is_coin_base() != 0) {
    _internal_set_is_coin_base(from._internal_is_coin_base());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCoinRecord::CopyFrom(const PCoinRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PCoinRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCoinRecord::IsInitialized() const {
  return true;
}

void PCoinRecord::InternalSwap(PCoinRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  utxo_.InternalSwap(&other->utxo_);
  amounts_.InternalSwap(&other->amounts_);
  public_keys_.InternalSwap(&other->public_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCoinRecord, height_)
      + sizeof(PCoinRecord::height_)
      - PROTOBUF_FIELD_OFFSET(PCoinRecord, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCoinRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rath_2eproto_getter, &descriptor_table_rath_2eproto_once,
      file_level_metadata_rath_2eproto[1]);
}

// ===================================================================

class PUndoBlock::_Internal {
 public:
};

PUndoBlock::PUndoBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transaction_hashes_(arena),
  undo_coin_records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PUndoBlock)
}
PUndoBlock::PUndoBlock(const PUndoBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transaction_hashes_(from.transaction_hashes_),
      undo_coin_records_(from.undo_coin_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PUndoBlock)
}

inline void PUndoBlock::SharedCtor() {
}

PUndoBlock::~PUndoBlock() {
  // @@protoc_insertion_point(destructor:PUndoBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PUndoBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PUndoBlock::ArenaDtor(void* object) {
  PUndoBlock* _this = reinterpret_cast< PUndoBlock* >(object);
  (void)_this;
}
void PUndoBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PUndoBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PUndoBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:PUndoBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_hashes_.Clear();
  undo_coin_records_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PUndoBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 transaction_hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_transaction_hashes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_transaction_hashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PUndoCoinRecord undo_coin_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_coin_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUndoBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PUndoBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 transaction_hashes = 1;
  {
    int byte_size = _transaction_hashes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_transaction_hashes(), byte_size, target);
    }
  }

  // repeated .PUndoCoinRecord undo_coin_records = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_undo_coin_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_undo_coin_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PUndoBlock)
  return target;
}

size_t PUndoBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PUndoBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 transaction_hashes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->transaction_hashes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _transaction_hashes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .PUndoCoinRecord undo_coin_records = 2;
  total_size += 1UL * this->_internal_undo_coin_records_size();
  for (const auto& msg : this->undo_coin_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PUndoBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PUndoBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PUndoBlock::GetClassData() const { return &_class_data_; }

void PUndoBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PUndoBlock *>(to)->MergeFrom(
      static_cast<const PUndoBlock &>(from));
}


void PUndoBlock::MergeFrom(const PUndoBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PUndoBlock)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transaction_hashes_.MergeFrom(from.transaction_hashes_);
  undo_coin_records_.MergeFrom(from.undo_coin_records_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PUndoBlock::CopyFrom(const PUndoBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PUndoBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUndoBlock::IsInitialized() const {
  return true;
}

void PUndoBlock::InternalSwap(PUndoBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transaction_hashes_.InternalSwap(&other->transaction_hashes_);
  undo_coin_records_.InternalSwap(&other->undo_coin_records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUndoBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rath_2eproto_getter, &descriptor_table_rath_2eproto_once,
      file_level_metadata_rath_2eproto[2]);
}

// ===================================================================

class PBlock::_Internal {
 public:
  static const ::PBlockHeader& block_header(const PBlock* msg);
};

const ::PBlockHeader&
PBlock::_Internal::block_header(const PBlock* msg) {
  return *msg->block_header_;
}
PBlock::PBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PBlock)
}
PBlock::PBlock(const PBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_header()) {
    block_header_ = new ::PBlockHeader(*from.block_header_);
  } else {
    block_header_ = nullptr;
  }
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&obtain_merkle_root_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(obtain_merkle_root_));
  // @@protoc_insertion_point(copy_constructor:PBlock)
}

inline void PBlock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&obtain_merkle_root_) -
    reinterpret_cast<char*>(&block_header_)) + sizeof(obtain_merkle_root_));
}

PBlock::~PBlock() {
  // @@protoc_insertion_point(destructor:PBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_header_;
}

void PBlock::ArenaDtor(void* object) {
  PBlock* _this = reinterpret_cast< PBlock* >(object);
  (void)_this;
}
void PBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:PBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  if (GetArenaForAllocation() == nullptr && block_header_ != nullptr) {
    delete block_header_;
  }
  block_header_ = nullptr;
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obtain_merkle_root_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(obtain_merkle_root_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PBlockHeader block_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PTransaction transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 calculate_fees = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          calculate_fees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 obtain_merkle_root = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          obtain_merkle_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBlockHeader block_header = 1;
  if (this->_internal_has_block_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block_header(this), target, stream);
  }

  // repeated .PTransaction transactions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_transactions(i), target, stream);
  }

  // uint32 hash = 3;
  if (this->_internal_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hash(), target);
  }

  // uint32 calculate_fees = 4;
  if (this->_internal_calculate_fees() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_calculate_fees(), target);
  }

  // uint32 obtain_merkle_root = 5;
  if (this->_internal_obtain_merkle_root() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_obtain_merkle_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBlock)
  return target;
}

size_t PBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PTransaction transactions = 2;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PBlockHeader block_header = 1;
  if (this->_internal_has_block_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_header_);
  }

  // uint32 hash = 3;
  if (this->_internal_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hash());
  }

  // uint32 calculate_fees = 4;
  if (this->_internal_calculate_fees() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_calculate_fees());
  }

  // uint32 obtain_merkle_root = 5;
  if (this->_internal_obtain_merkle_root() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_obtain_merkle_root());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBlock::GetClassData() const { return &_class_data_; }

void PBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PBlock *>(to)->MergeFrom(
      static_cast<const PBlock &>(from));
}


void PBlock::MergeFrom(const PBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBlock)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from._internal_has_block_header()) {
    _internal_mutable_block_header()->::PBlockHeader::MergeFrom(from._internal_block_header());
  }
  if (from._internal_hash() != 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_calculate_fees() != 0) {
    _internal_set_calculate_fees(from._internal_calculate_fees());
  }
  if (from._internal_obtain_merkle_root() != 0) {
    _internal_set_obtain_merkle_root(from._internal_obtain_merkle_root());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBlock::CopyFrom(const PBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBlock::IsInitialized() const {
  return true;
}

void PBlock::InternalSwap(PBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBlock, obtain_merkle_root_)
      + sizeof(PBlock::obtain_merkle_root_)
      - PROTOBUF_FIELD_OFFSET(PBlock, block_header_)>(
          reinterpret_cast<char*>(&block_header_),
          reinterpret_cast<char*>(&other->block_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rath_2eproto_getter, &descriptor_table_rath_2eproto_once,
      file_level_metadata_rath_2eproto[3]);
}

// ===================================================================

class PBlockHeader::_Internal {
 public:
};

PBlockHeader::PBlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PBlockHeader)
}
PBlockHeader::PBlockHeader(const PBlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&version_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:PBlockHeader)
}

inline void PBlockHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&version_)) + sizeof(timestamp_));
}

PBlockHeader::~PBlockHeader() {
  // @@protoc_insertion_point(destructor:PBlockHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PBlockHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PBlockHeader::ArenaDtor(void* object) {
  PBlockHeader* _this = reinterpret_cast< PBlockHeader* >(object);
  (void)_this;
}
void PBlockHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PBlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:PBlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&version_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 previous_block_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          previous_block_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 merkle_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          merkle_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 difficulty_target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          difficulty_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nonce = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PBlockHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // uint32 previous_block_hash = 2;
  if (this->_internal_previous_block_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_previous_block_hash(), target);
  }

  // uint32 merkle_root = 3;
  if (this->_internal_merkle_root() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_merkle_root(), target);
  }

  // uint32 difficulty_target = 4;
  if (this->_internal_difficulty_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_difficulty_target(), target);
  }

  // uint32 nonce = 5;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nonce(), target);
  }

  // uint32 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBlockHeader)
  return target;
}

size_t PBlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBlockHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 previous_block_hash = 2;
  if (this->_internal_previous_block_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_previous_block_hash());
  }

  // uint32 merkle_root = 3;
  if (this->_internal_merkle_root() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_merkle_root());
  }

  // uint32 difficulty_target = 4;
  if (this->_internal_difficulty_target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_difficulty_target());
  }

  // uint32 nonce = 5;
  if (this->_internal_nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nonce());
  }

  // uint32 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBlockHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PBlockHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBlockHeader::GetClassData() const { return &_class_data_; }

void PBlockHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PBlockHeader *>(to)->MergeFrom(
      static_cast<const PBlockHeader &>(from));
}


void PBlockHeader::MergeFrom(const PBlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_previous_block_hash() != 0) {
    _internal_set_previous_block_hash(from._internal_previous_block_hash());
  }
  if (from._internal_merkle_root() != 0) {
    _internal_set_merkle_root(from._internal_merkle_root());
  }
  if (from._internal_difficulty_target() != 0) {
    _internal_set_difficulty_target(from._internal_difficulty_target());
  }
  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBlockHeader::CopyFrom(const PBlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBlockHeader::IsInitialized() const {
  return true;
}

void PBlockHeader::InternalSwap(PBlockHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBlockHeader, timestamp_)
      + sizeof(PBlockHeader::timestamp_)
      - PROTOBUF_FIELD_OFFSET(PBlockHeader, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PBlockHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rath_2eproto_getter, &descriptor_table_rath_2eproto_once,
      file_level_metadata_rath_2eproto[4]);
}

// ===================================================================

class PTransaction::_Internal {
 public:
};

PTransaction::PTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transaction_inputs_(arena),
  transaction_outputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PTransaction)
}
PTransaction::PTransaction(const PTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transaction_inputs_(from.transaction_inputs_),
      transaction_outputs_(from.transaction_outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_time_) -
    reinterpret_cast<char*>(&version_)) + sizeof(lock_time_));
  // @@protoc_insertion_point(copy_constructor:PTransaction)
}

inline void PTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lock_time_) -
    reinterpret_cast<char*>(&version_)) + sizeof(lock_time_));
}

PTransaction::~PTransaction() {
  // @@protoc_insertion_point(destructor:PTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PTransaction::ArenaDtor(void* object) {
  PTransaction* _this = reinterpret_cast< PTransaction* >(object);
  (void)_this;
}
void PTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:PTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_inputs_.Clear();
  transaction_outputs_.Clear();
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_time_) -
      reinterpret_cast<char*>(&version_)) + sizeof(lock_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PTransactionInput transaction_inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transaction_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PTransactionOutput transaction_outputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transaction_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 lock_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated .PTransactionInput transaction_inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transaction_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_transaction_inputs(i), target, stream);
  }

  // repeated .PTransactionOutput transaction_outputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transaction_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_transaction_outputs(i), target, stream);
  }

  // uint32 lock_time = 4;
  if (this->_internal_lock_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lock_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTransaction)
  return target;
}

size_t PTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PTransactionInput transaction_inputs = 2;
  total_size += 1UL * this->_internal_transaction_inputs_size();
  for (const auto& msg : this->transaction_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PTransactionOutput transaction_outputs = 3;
  total_size += 1UL * this->_internal_transaction_outputs_size();
  for (const auto& msg : this->transaction_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 lock_time = 4;
  if (this->_internal_lock_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lock_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PTransaction::GetClassData() const { return &_class_data_; }

void PTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PTransaction *>(to)->MergeFrom(
      static_cast<const PTransaction &>(from));
}


void PTransaction::MergeFrom(const PTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transaction_inputs_.MergeFrom(from.transaction_inputs_);
  transaction_outputs_.MergeFrom(from.transaction_outputs_);
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_lock_time() != 0) {
    _internal_set_lock_time(from._internal_lock_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PTransaction::CopyFrom(const PTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTransaction::IsInitialized() const {
  return true;
}

void PTransaction::InternalSwap(PTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transaction_inputs_.InternalSwap(&other->transaction_inputs_);
  transaction_outputs_.InternalSwap(&other->transaction_outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PTransaction, lock_time_)
      + sizeof(PTransaction::lock_time_)
      - PROTOBUF_FIELD_OFFSET(PTransaction, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rath_2eproto_getter, &descriptor_table_rath_2eproto_once,
      file_level_metadata_rath_2eproto[5]);
}

// ===================================================================

class PTransactionInput::_Internal {
 public:
};

PTransactionInput::PTransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PTransactionInput)
}
PTransactionInput::PTransactionInput(const PTransactionInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reference_transaction_hash_, &from.reference_transaction_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&reference_transaction_hash_)) + sizeof(signature_));
  // @@protoc_insertion_point(copy_constructor:PTransactionInput)
}

inline void PTransactionInput::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reference_transaction_hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&reference_transaction_hash_)) + sizeof(signature_));
}

PTransactionInput::~PTransactionInput() {
  // @@protoc_insertion_point(destructor:PTransactionInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PTransactionInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PTransactionInput::ArenaDtor(void* object) {
  PTransactionInput* _this = reinterpret_cast< PTransactionInput* >(object);
  (void)_this;
}
void PTransactionInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PTransactionInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PTransactionInput::Clear() {
// @@protoc_insertion_point(message_clear_start:PTransactionInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reference_transaction_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signature_) -
      reinterpret_cast<char*>(&reference_transaction_hash_)) + sizeof(signature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PTransactionInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 reference_transaction_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reference_transaction_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 utxo_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          utxo_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PTransactionInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTransactionInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reference_transaction_hash = 1;
  if (this->_internal_reference_transaction_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reference_transaction_hash(), target);
  }

  // uint32 utxo_index = 2;
  if (this->_internal_utxo_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_utxo_index(), target);
  }

  // uint32 signature = 3;
  if (this->_internal_signature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTransactionInput)
  return target;
}

size_t PTransactionInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTransactionInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reference_transaction_hash = 1;
  if (this->_internal_reference_transaction_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reference_transaction_hash());
  }

  // uint32 utxo_index = 2;
  if (this->_internal_utxo_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utxo_index());
  }

  // uint32 signature = 3;
  if (this->_internal_signature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PTransactionInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PTransactionInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PTransactionInput::GetClassData() const { return &_class_data_; }

void PTransactionInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PTransactionInput *>(to)->MergeFrom(
      static_cast<const PTransactionInput &>(from));
}


void PTransactionInput::MergeFrom(const PTransactionInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTransactionInput)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reference_transaction_hash() != 0) {
    _internal_set_reference_transaction_hash(from._internal_reference_transaction_hash());
  }
  if (from._internal_utxo_index() != 0) {
    _internal_set_utxo_index(from._internal_utxo_index());
  }
  if (from._internal_signature() != 0) {
    _internal_set_signature(from._internal_signature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PTransactionInput::CopyFrom(const PTransactionInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTransactionInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTransactionInput::IsInitialized() const {
  return true;
}

void PTransactionInput::InternalSwap(PTransactionInput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PTransactionInput, signature_)
      + sizeof(PTransactionInput::signature_)
      - PROTOBUF_FIELD_OFFSET(PTransactionInput, reference_transaction_hash_)>(
          reinterpret_cast<char*>(&reference_transaction_hash_),
          reinterpret_cast<char*>(&other->reference_transaction_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PTransactionInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rath_2eproto_getter, &descriptor_table_rath_2eproto_once,
      file_level_metadata_rath_2eproto[6]);
}

// ===================================================================

class PTransactionOutput::_Internal {
 public:
};

PTransactionOutput::PTransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PTransactionOutput)
}
PTransactionOutput::PTransactionOutput(const PTransactionOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_key_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(public_key_));
  // @@protoc_insertion_point(copy_constructor:PTransactionOutput)
}

inline void PTransactionOutput::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&public_key_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(public_key_));
}

PTransactionOutput::~PTransactionOutput() {
  // @@protoc_insertion_point(destructor:PTransactionOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PTransactionOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PTransactionOutput::ArenaDtor(void* object) {
  PTransactionOutput* _this = reinterpret_cast< PTransactionOutput* >(object);
  (void)_this;
}
void PTransactionOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PTransactionOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PTransactionOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:PTransactionOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_key_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(public_key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PTransactionOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          public_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PTransactionOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PTransactionOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 amount = 1;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_amount(), target);
  }

  // uint32 public_key = 2;
  if (this->_internal_public_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PTransactionOutput)
  return target;
}

size_t PTransactionOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PTransactionOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_amount());
  }

  // uint32 public_key = 2;
  if (this->_internal_public_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PTransactionOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PTransactionOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PTransactionOutput::GetClassData() const { return &_class_data_; }

void PTransactionOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PTransactionOutput *>(to)->MergeFrom(
      static_cast<const PTransactionOutput &>(from));
}


void PTransactionOutput::MergeFrom(const PTransactionOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PTransactionOutput)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_public_key() != 0) {
    _internal_set_public_key(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PTransactionOutput::CopyFrom(const PTransactionOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PTransactionOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTransactionOutput::IsInitialized() const {
  return true;
}

void PTransactionOutput::InternalSwap(PTransactionOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PTransactionOutput, public_key_)
      + sizeof(PTransactionOutput::public_key_)
      - PROTOBUF_FIELD_OFFSET(PTransactionOutput, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PTransactionOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rath_2eproto_getter, &descriptor_table_rath_2eproto_once,
      file_level_metadata_rath_2eproto[7]);
}

// ===================================================================

class PUndoCoinRecord::_Internal {
 public:
};

PUndoCoinRecord::PUndoCoinRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  utxo_(arena),
  amounts_(arena),
  public_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PUndoCoinRecord)
}
PUndoCoinRecord::PUndoCoinRecord(const PUndoCoinRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      utxo_(from.utxo_),
      amounts_(from.amounts_),
      public_keys_(from.public_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&version_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:PUndoCoinRecord)
}

inline void PUndoCoinRecord::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&version_)) + sizeof(height_));
}

PUndoCoinRecord::~PUndoCoinRecord() {
  // @@protoc_insertion_point(destructor:PUndoCoinRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PUndoCoinRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PUndoCoinRecord::ArenaDtor(void* object) {
  PUndoCoinRecord* _this = reinterpret_cast< PUndoCoinRecord* >(object);
  (void)_this;
}
void PUndoCoinRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PUndoCoinRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PUndoCoinRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:PUndoCoinRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utxo_.Clear();
  amounts_.Clear();
  public_keys_.Clear();
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&version_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PUndoCoinRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_coin_base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_coin_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 utxo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_utxo(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_utxo(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 amounts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_amounts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_amounts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 public_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_public_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_public_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUndoCoinRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PUndoCoinRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // bool is_coin_base = 2;
  if (this->_internal_is_coin_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_coin_base(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // repeated uint32 utxo = 4;
  {
    int byte_size = _utxo_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_utxo(), byte_size, target);
    }
  }

  // repeated uint32 amounts = 5;
  {
    int byte_size = _amounts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_amounts(), byte_size, target);
    }
  }

  // repeated uint32 public_keys = 6;
  {
    int byte_size = _public_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_public_keys(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PUndoCoinRecord)
  return target;
}

size_t PUndoCoinRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PUndoCoinRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 utxo = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->utxo_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _utxo_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 amounts = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->amounts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _amounts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 public_keys = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->public_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _public_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // bool is_coin_base = 2;
  if (this->_internal_is_coin_base() != 0) {
    total_size += 1 + 1;
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PUndoCoinRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PUndoCoinRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PUndoCoinRecord::GetClassData() const { return &_class_data_; }

void PUndoCoinRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PUndoCoinRecord *>(to)->MergeFrom(
      static_cast<const PUndoCoinRecord &>(from));
}


void PUndoCoinRecord::MergeFrom(const PUndoCoinRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PUndoCoinRecord)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  utxo_.MergeFrom(from.utxo_);
  amounts_.MergeFrom(from.amounts_);
  public_keys_.MergeFrom(from.public_keys_);
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_is_coin_base() != 0) {
    _internal_set_is_coin_base(from._internal_is_coin_base());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PUndoCoinRecord::CopyFrom(const PUndoCoinRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PUndoCoinRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUndoCoinRecord::IsInitialized() const {
  return true;
}

void PUndoCoinRecord::InternalSwap(PUndoCoinRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  utxo_.InternalSwap(&other->utxo_);
  amounts_.InternalSwap(&other->amounts_);
  public_keys_.InternalSwap(&other->public_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PUndoCoinRecord, height_)
      + sizeof(PUndoCoinRecord::height_)
      - PROTOBUF_FIELD_OFFSET(PUndoCoinRecord, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PUndoCoinRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rath_2eproto_getter, &descriptor_table_rath_2eproto_once,
      file_level_metadata_rath_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PBlockRecord* Arena::CreateMaybeMessage< ::PBlockRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBlockRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PCoinRecord* Arena::CreateMaybeMessage< ::PCoinRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PCoinRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::PUndoBlock* Arena::CreateMaybeMessage< ::PUndoBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PUndoBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::PBlock* Arena::CreateMaybeMessage< ::PBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::PBlockHeader* Arena::CreateMaybeMessage< ::PBlockHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PBlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::PTransaction* Arena::CreateMaybeMessage< ::PTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::PTransactionInput* Arena::CreateMaybeMessage< ::PTransactionInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTransactionInput >(arena);
}
template<> PROTOBUF_NOINLINE ::PTransactionOutput* Arena::CreateMaybeMessage< ::PTransactionOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PTransactionOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::PUndoCoinRecord* Arena::CreateMaybeMessage< ::PUndoCoinRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PUndoCoinRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
